// Google OAuth Client
const googleClient = new OAuth2Client(
    process.env.CLIENT_ID,
    process.env.CLIENT_SECRET,
    process.env.REDIRECT_URI
);

// üìå Google OAuth Login API (‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ `id_token`)
app.post('/auth/google', async (req, res) => {
    const { token } = req.body;
    console.log("üìå Received Token:", token);

    try {
        const ticket = await googleClient.verifyIdToken({
            idToken: token,
            audience: process.env.CLIENT_ID,  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Client ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        });

        const payload = ticket.getPayload();
        const email = payload.email;
        const name = payload.name;

        console.log(`‚úÖ Google Login Success: ${name} (${email})`);

        res.json({
            message: "‚úÖ Google Login Success",
            email: email,
            name: name
        });

    } catch (error) {
        console.error("‚ùå Google Login Failed:", error);
        res.status(400).json({ error: "‚ùå Invalid Google token" });
    }
});

// üìå Google OAuth 2.0 (‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Authorization Code ‡πÄ‡∏õ‡πá‡∏ô Access Token)
app.get("/auth/google/callback", async (req, res) => {
    const code = req.query.code;  
    if (!code) {
        return res.status(400).send("‚ùå Authorization Code not found");
    }

    try {
        // ‚úÖ ‡πÉ‡∏ä‡πâ axios ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Code ‡πÄ‡∏õ‡πá‡∏ô Token
        const response = await axios.post('https://oauth2.googleapis.com/token', {
            code: code,
            client_id: process.env.CLIENT_ID,
            client_secret: process.env.CLIENT_SECRET,
            redirect_uri: process.env.REDIRECT_URI,
            grant_type: 'authorization_code',
        });

        const tokens = response.data;
        console.log("‚úÖ Google Tokens:", tokens);

        // ‚úÖ ‡πÉ‡∏ä‡πâ Token ‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google
        const userInfoResponse = await axios.get('https://www.googleapis.com/oauth2/v2/userinfo', {
            headers: { Authorization: `Bearer ${tokens.access_token}` }
        });

        const { email, name } = userInfoResponse.data;
        console.log(`‚úÖ Google Login Success: ${name} (${email})`);

        // ‚úÖ Redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á email ‡πÅ‡∏•‡∏∞ name ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        res.redirect(`/login.html?success=true&name=${encodeURIComponent(name)}&email=${encodeURIComponent(email)}`);

    } catch (error) {
        console.error("‚ùå Error exchanging code for token:", error.response ? error.response.data : error.message);
        res.redirect(`/login.html?error=true`);
    }
});